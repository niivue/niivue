"use strict";(self.webpackChunk_niivue_docs=self.webpackChunk_niivue_docs||[]).push([[281],{62:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Loading images","title":"Loading images","description":"Generic loading","source":"@site/docs/Loading images.mdx","sourceDirName":".","slug":"/Loading images","permalink":"/docs/Loading images","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/docs/"},"next":{"title":"Using Colormaps","permalink":"/docs/colormaps"}}');var s=t(1085),l=t(1184);const r={sidebar_position:2},a=void 0,d={},o=[{value:"Generic loading",id:"generic-loading",level:2},{value:"Loading from a URL",id:"loading-from-a-url",level:3},{value:"Loading from an existing ArrayBuffer",id:"loading-from-an-existing-arraybuffer",level:3},{value:"Loading from a Browser File object",id:"loading-from-a-browser-file-object",level:3},{value:"Volume data",id:"volume-data",level:2},{value:"Mesh data",id:"mesh-data",level:2},{value:"Using custom image loaders",id:"using-custom-image-loaders",level:2},{value:"Example external tiff loader",id:"example-external-tiff-loader",level:3},{value:"DICOM loading",id:"dicom-loading",level:2},{value:"Drag and Drop",id:"drag-and-drop",level:2},{value:"Supported formats",id:"supported-formats",level:2},{value:"Voxel-based formats",id:"voxel-based-formats",level:3},{value:"Mesh-based formats",id:"mesh-based-formats",level:3},{value:"Mesh overlay formats",id:"mesh-overlay-formats",level:3},{value:"Tractography formats",id:"tractography-formats",level:3},{value:"Advanced Volume and Mesh loading",id:"advanced-volume-and-mesh-loading",level:2},{value:"NVImage.loadFromUrl",id:"nvimageloadfromurl",level:3},{value:"NVImage.loadFromFile",id:"nvimageloadfromfile",level:3},{value:"NVImage.loadFromBase64",id:"nvimageloadfrombase64",level:3},{value:"NVMesh.loadFromUrl",id:"nvmeshloadfromurl",level:3},{value:"NVMesh.loadFromFile",id:"nvmeshloadfromfile",level:3},{value:"NVMesh.loadFromBase64",id:"nvmeshloadfrombase64",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"generic-loading",children:"Generic loading"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"loadImages"})," method to load both volume (e.g. .nii, .nrrd) and mesh (e.g. .mz3, .obj) objects all at once. Niivue will determine the file type from the file extension in the URL or the name attributes. This is the easiest way to load images without thinking about how to handle various file types."]}),"\n",(0,s.jsx)(n.h3,{id:"loading-from-a-url",children:"Loading from a URL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// assuming nv is a NiiVue instance\nconst volume = {\n    url: "https://niivue.github.io/niivue-demo-images/mni152.nii.gz",\n    name: "mni152.nii.gz" // optional if the url ends with a file extension\n}\nconst mesh = {\n    url: "https://niivue.github.io/niivue-demo-images/BrainMesh_ICBM152.lh.mz3",\n    name: "my_mesh.mz3" // you can also supply a new name, but the file extension should be truthful\n}\nconst imageList = [volume, mesh]\n// loadImages is an async function, so be sure to "await" it\nawait nv.loadImages(imageList)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"loading-from-an-existing-arraybuffer",children:"Loading from an existing ArrayBuffer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// The name must contain an extension so niivue can parse the array buffer correctly\nconst name = "image.nii.gz" // volume example. For mesh data, use the proper extension for your loaded array buffer\n// Assuming arrayBufferData is an ArrayBuffer you have already fetched from somewhere\nnv.loadFromArrayBuffer(arrayBufferData, name)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"loading-from-a-browser-file-object",children:"Loading from a Browser File object"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Assuming you have already loaded "myFileObject" as a File in the browser (e.g. an input element)\nnv.loadFromFile(myFileObject) // the .name property of the File will be used to determine the file type from the extension\n'})}),"\n",(0,s.jsx)(n.h2,{id:"volume-data",children:"Volume data"}),"\n",(0,s.jsxs)(n.p,{children:["If you just want to load volume data then you can use the ",(0,s.jsx)(n.code,{children:"loadVolumes"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// assuming nv is a NiiVue instance\nconst volume = {\n    url: "https://niivue.github.io/niivue-demo-images/mni152.nii.gz",\n    name: "mni152.nii.gz" // optional if the url ends with a file extension\n}\nconst volumeList = [volume]\n// loadVolumes is an async function, so be sure to "await" it\nawait nv.loadVolumes(volumeList)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"mesh-data",children:"Mesh data"}),"\n",(0,s.jsxs)(n.p,{children:["If you just want to load mesh data, then you can use the ",(0,s.jsx)(n.code,{children:"loadMeshes"})," method. Note that if no volume data is also loaded, then mesh data will be rendered in 3D. If volume data is also loaded in the scene then slice views and 3D views are supported."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// assuming nv is a NiiVue instance\nconst mesh = {\n    url: "https://niivue.github.io/niivue-demo-images/BrainMesh_ICBM152.lh.mz3",\n    name: "my_mesh.mz3" // optional if the url ends with a file extension\n}\nconst meshList = [mesh]\n// loadMeshes is an async function, so be sure to "await" it\nawait nv.loadMeshes(meshList)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-custom-image-loaders",children:"Using custom image loaders"}),"\n",(0,s.jsx)(n.p,{children:"NiiVue supports using custom image loader functions for new file formats. You can also replace built-in loaders for a supported file format if you wish."}),"\n",(0,s.jsx)(n.h3,{id:"example-external-tiff-loader",children:"Example external tiff loader"}),"\n",(0,s.jsxs)(n.p,{children:["NiiVue does not have a built-in tiff parser, but we have published a ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/niivue/tiff-loader/tree/main",children:"niivue tiff loader"})})," that can be used with ",(0,s.jsx)(n.code,{children:"useLoader"})," as a plugin."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { Niivue } from '@niivue/niivue'\nimport { tiff2nii } from '@niivue/tiff-loader'\n\nconst nv = new Niivue()\nawait nv.attachToCanvas(document.getElementById('niivue-canvas'))\n// supply loader function, fromExt, and toExt (without dots)\nnv.useLoader(tiff2nii, 'tif', 'nii') // use the tiff2nii loader function to parse \"tif\" and format it internally as \"nii\"\nnv.useLoader(tiff2nii, 'tiff', 'nii')\nnv.useLoader(tiff2nii, 'lsm', 'nii')\n// now niivue is aware of the new extensions, and how to load them\nawait nv.loadImages([\n  {\n    url: '/example.tif'\n  }\n])\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dicom-loading",children:"DICOM loading"}),"\n",(0,s.jsxs)(n.p,{children:["NiiVue supports DICOM Volumes, but you must use a ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/niivue/niivue/tree/main/packages/dicom-loader",children:"special DICOM loader"})})," that we publish as a separate package."]}),"\n",(0,s.jsxs)(n.p,{children:["Our DICOM loader uses the ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/rordenlab/dcm2niix/tree/master/js",children:"Web Assembly build of dcm2niix"})}),", which allows comprehensive DICOM parsing. This is an extra dependency in order to keep the core NiiVue package as lean as possible for most use cases."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { dicomLoader } from "@niivue/dicom-loader"\nimport { Niivue } from "@niivue/niivue"\n\nconst nv = new Niivue()\n\nnv.useDicomLoader({\n    loader: dicomLoader\n})\n\nnv.loadDicoms([\n    // dicom manifest example\n    // { url: "../tests/images/dicom/niivue-manifest.txt", isManifest: true},\n    // single file example (enhanced dicom)\n    { url: "../demos/images/enh.dcm"}\n])\n// NOTE: if you register the dicomLoader with Niivue, drag and drop of dicom folders is supported out of the box. Just drop a folder onto the canvas\n'})}),"\n",(0,s.jsx)(n.h2,{id:"drag-and-drop",children:"Drag and Drop"}),"\n",(0,s.jsx)(n.p,{children:"NiiVue supports image loading if a file is dropped onto the canvas that is attached to a NiiVue instance. By default, all supported images formats are supported, and any custom image loaders that have been setup are also supported."}),"\n",(0,s.jsxs)(n.p,{children:["There is special handling for folders of DICOM images dropped onto the canvas. If the ",(0,s.jsx)(n.code,{children:"@niivue/dicom-loader"})," plugin has been setup, NiiVue will parse and display the DICOM images."]}),"\n",(0,s.jsxs)(n.p,{children:["You can disable all drag and drop file loading if you set ",(0,s.jsx)(n.code,{children:"dragAndDropEnabled"})," to ",(0,s.jsx)(n.code,{children:"false"})," (default is ",(0,s.jsx)(n.code,{children:"true"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// assuming nv is a niivue instance you have already created\nnv.opts.dragAndDropEnabled = false // disable drag and drop file loading\n"})}),"\n",(0,s.jsx)(n.h2,{id:"supported-formats",children:"Supported formats"}),"\n",(0,s.jsx)(n.h3,{id:"voxel-based-formats",children:"Voxel-based formats"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Volume \ud83d\udfe6"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Mesh \ud83d\udfe9"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NIfTI"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NRRD"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MRtrix MIF"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AFNI HEAD/BRIK"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MGH/MGZ"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ITK MHD"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ECAT7"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DSI-Studio SRC"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DICOM"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DICOM Manifests"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"mesh-based-formats",children:"Mesh-based formats"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Volume \ud83d\udfe6"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Mesh \ud83d\udfe9"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GIfTI"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASC"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BYU/GEO/G"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BrainSuite DFS"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ICO/TRI"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PLY"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BrainNet NV"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"BrainVoyager SRF"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FreeSurfer"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MZ3"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OFF"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Wavefront OBJ"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"STL"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Legacy VTK"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"WRL"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"X3D"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"mesh-overlay-formats",children:"Mesh overlay formats"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Volume \ud83d\udfe6"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Mesh \ud83d\udfe9"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GIfTI"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CIfTI-2"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MZ3"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SMP"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"STC"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FreeSurfer (CURV/ANNOT)"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"tractography-formats",children:"Tractography formats"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Format"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Volume \ud83d\udfe6"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Mesh \ud83d\udfe9"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TCK"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TRK"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TRX"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TSF"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TT"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"VTK"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AFNI .niml.tract"}),(0,s.jsx)(n.td,{style:{textAlign:"center"}}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-volume-and-mesh-loading",children:"Advanced Volume and Mesh loading"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"loadImages"}),", ",(0,s.jsx)(n.code,{children:"loadVolumes"}),", and ",(0,s.jsx)(n.code,{children:"loadMeshes"})," methods of a NiiVue instance are the most convenient way to load images and display them all in one command."]}),"\n",(0,s.jsxs)(n.p,{children:["If you want more control over loading images, you can use the ",(0,s.jsx)(n.code,{children:"NVImage"})," and ",(0,s.jsx)(n.code,{children:"NVMesh"})," classes directly. The image loading methods on these classes are actually what a NiiVue instance calls under the hood. However, if you load image data with these classes, you will then need to call extra NiiVue functions to display the data as well."]}),"\n",(0,s.jsx)(n.h3,{id:"nvimageloadfromurl",children:"NVImage.loadFromUrl"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NVImage, Niivue } from '@niivue/niivue'\nconst nv = new Niivue()\nconst image = await NVImage.loadFromUrl({\n    url: \"https://niivue.github.io/niivue-demo-images/mni152.nii.gz\"\n})\n// To display, add to a NiiVue instance:\nnv.addVolume(image)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nvimageloadfromfile",children:"NVImage.loadFromFile"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NVImage, Niivue } from '@niivue/niivue'\nconst nv = new Niivue()\n// myFileObject is a File object from an input element\nconst image = await NVImage.loadFromFile({file: myFileObject})\nnv.addVolume(image)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nvimageloadfrombase64",children:"NVImage.loadFromBase64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NVImage, Niivue } from '@niivue/niivue'\nconst nv = new Niivue()\n// base64String is a base64-encoded NIfTI file string\nconst image = await NVImage.loadFromBase64({base64: base64String, name: \"image.nii.gz\"})\nnv.addVolume(image)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nvmeshloadfromurl",children:"NVMesh.loadFromUrl"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { NVMesh, Niivue } from \'@niivue/niivue\'\nconst nv = new Niivue()\nconst image = await NVMesh.loadFromUrl({\n    url: "https://niivue.github.io/niivue-demo-images/BrainMesh_ICBM152.lh.mz3",\n    name: "mesh.mz3",\n    gl: nv.canvas.gl\n})\nnv.addMesh(image)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"nvmeshloadfromfile",children:"NVMesh.loadFromFile"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NVMesh, Niivue } from '@niivue/niivue'\nconst nv = new Niivue()\n// myFileObject is a File object from an input element\nconst image = await NVMesh.loadFromFile({file: myFileObject, gl: nv.canvas.gl, name: myFileObject.name})\nnv.addMesh(image)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nvmeshloadfrombase64",children:"NVMesh.loadFromBase64"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { NVMesh, Niivue } from '@niivue/niivue'\nconst nv = new Niivue()\n// base64String is a base64-encoded mesh file string\nconst image = await NVMesh.loadFromBase64({base64: base64String, gl: nv.canvas.gl, name: \"mesh.mz3\"})\nnv.addMesh(image)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);