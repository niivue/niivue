"use strict";(self.webpackChunk_niivue_docs=self.webpackChunk_niivue_docs||[]).push([[209],{5894:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>h,contentTitle:()=>p,default:()=>f,frontMatter:()=>d,metadata:()=>o,toc:()=>v});const o=JSON.parse('{"id":"colormaps","title":"Using Colormaps","description":"Colormaps are essential for visualizing data, as they map the values within your images to specific colors displayed on the screen. Niivue provides a range of built-in colormaps and allows you to define your own custom maps.","source":"@site/docs/colormaps.mdx","sourceDirName":".","slug":"/colormaps","permalink":"/docs/colormaps","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Using Colormaps","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Loading images","permalink":"/docs/Loading images"},"next":{"title":"Layouts and Slice Types","permalink":"/docs/layouts"}}');var i=a(1085),t=a(1184),s=a(6190),l=a(4041);const r=[{url:"https://niivue.github.io/niivue-demo-images/mni152.nii.gz",colormap:"gray",opacity:1,visible:!0}],c={isColorbar:!0,logLevel:"info",multiplanarShowRender:s.dq.ALWAYS,multiplanarLayout:s.v6.GRID},u=e=>{let{images:n=r,nvOpts:a={}}=e;const o=(0,l.useRef)(null),t=(0,l.useRef)(null),[u,m]=(0,l.useState)([]),[d,p]=(0,l.useState)(n[0]?.colormap||"gray"),[h,v]=(0,l.useState)(1),[g,f]=(0,l.useState)(!1),[y,x]=(0,l.useState)(c.isColorbar),j={...c,...a};(0,l.useEffect)((()=>((async()=>{if(!t.current&&o.current){console.log("Initializing Niivue...");const a=new s.FM(j);t.current=a,await a.attachToCanvas(o.current),console.log("Niivue attached to canvas.");try{console.log("Loading volumes:",n),await a.loadVolumes(n),console.log("Volumes loaded.");const e=a.colormaps();console.log("Available colormaps:",e),m(e),x(a.opts.isColorbar),a.volumes.length>0&&(p(a.volumes[0].colormap),f(a.volumes[0].colormapInvert||!1))}catch(e){console.error("Error loading volumes:",e)}}})(),()=>{console.log("Cleaning up Niivue instance..."),t.current=null})),[]);return(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",gap:"10px",padding:"10px",border:"1px solid #ccc",borderRadius:"8px",marginBottom:"15px"},children:[(0,i.jsx)("div",{style:{width:640,height:480},children:(0,i.jsx)("canvas",{ref:o,width:640,height:480,style:{border:"1px solid lightgray",display:"block"}})}),(0,i.jsxs)("div",{style:{display:"flex",flexWrap:"wrap",justifyContent:"center",gap:"15px",alignItems:"center"},children:[(0,i.jsx)("button",{onClick:()=>{if(t.current){const e=t.current;e.opts.isColorbar=!e.opts.isColorbar,x(e.opts.isColorbar),e.drawScene()}},disabled:!t.current,children:y?"Hide Colorbar":"Show Colorbar"}),(0,i.jsxs)("div",{children:[(0,i.jsx)("label",{htmlFor:"colormapSelect",style:{marginRight:"5px"},children:"Colormap:"}),(0,i.jsx)("select",{id:"colormapSelect",value:d,onChange:e=>{const n=e.target.value;if(t.current&&t.current.volumes.length>0){const e=t.current.volumes[0].id;console.log(`Setting colormap to: ${n}`),t.current.setColormap(e,n),p(n)}},disabled:0===u.length,children:0===u.length?(0,i.jsx)("option",{children:"Loading..."}):u.map((e=>(0,i.jsx)("option",{value:e,children:e},e)))})]}),(0,i.jsxs)("div",{children:[(0,i.jsx)("input",{type:"checkbox",id:"invertCheck",checked:g,onChange:e=>{const n=e.target.checked;t.current&&t.current.volumes.length>0&&(console.log(`Setting colormap invert to: ${n}`),t.current.volumes[0].colormapInvert=n,t.current.updateGLVolume(),f(n))},disabled:!t.current||0===t.current.volumes.length}),(0,i.jsx)("label",{htmlFor:"invertCheck",style:{marginLeft:"5px"},children:"Invert"})]}),(0,i.jsxs)("div",{style:{display:"flex",alignItems:"center",gap:"5px"},children:[(0,i.jsx)("label",{htmlFor:"gammaSlider",children:"Gamma:"}),(0,i.jsx)("input",{type:"range",id:"gammaSlider",min:"0.1",max:"3.0",step:"0.1",value:h,onChange:e=>{const n=parseFloat(e.target.value);t.current&&(console.log(`Setting gamma to: ${n}`),t.current.setGamma(n),v(n))},disabled:!t.current}),(0,i.jsx)("span",{children:h.toFixed(1)})]})]})]})};var m=a(7221);const d={title:"Using Colormaps",sidebar_position:3},p=void 0,h={},v=[{value:"Setting an Initial Colormap",id:"setting-an-initial-colormap",level:2},{value:"Listing Available Colormaps",id:"listing-available-colormaps",level:2},{value:"Changing the Colormap",id:"changing-the-colormap",level:2},{value:"Inverting a Colormap",id:"inverting-a-colormap",level:2},{value:"Adjusting Gamma",id:"adjusting-gamma",level:2},{value:"Defining and Using Custom Colormaps",id:"defining-and-using-custom-colormaps",level:2},{value:"Displaying the Colorbar",id:"displaying-the-colorbar",level:2}];function g(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Colormaps are essential for visualizing data, as they map the values within your images to specific colors displayed on the screen. Niivue provides a range of built-in colormaps and allows you to define your own custom maps."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Try interacting with the Niivue canvas below!"})," You can select different colormaps, invert the current map, and adjust the gamma level using the controls."]}),"\n",(0,i.jsx)(m.A,{children:(0,i.jsx)(u,{})}),"\n",(0,i.jsx)(n.h2,{id:"setting-an-initial-colormap",children:"Setting an Initial Colormap"}),"\n",(0,i.jsx)(n.p,{children:"When loading volumes, you can specify the initial colormap for each volume directly in the configuration object."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Assuming 'nv' is your initialized Niivue instance (e.g., const nv = new Niivue();)\n// Ensure nv is attached to a canvas element.\n\nconst volumeList = [\n  {\n    url: \"/images/mni152.nii.gz\", // Replace with your image path\n    colormap: \"gray\", // Set the initial colormap here ('gray' is the default)\n    opacity: 1,\n    visible: true,\n  },\n  // You can add more volumes with different initial colormaps\n];\n\nawait nv.loadVolumes(volumeList);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"listing-available-colormaps",children:"Listing Available Colormaps"}),"\n",(0,i.jsxs)(n.p,{children:["Niivue comes with several predefined colormaps. You can retrieve a list of their names using the ",(0,i.jsx)(n.code,{children:"colormaps()"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Assuming 'nv' is your Niivue instance\n\nconst availableColormaps = nv.colormaps();\nconsole.log(availableColormaps);\n// Example Output: ['gray', 'warm', 'cool', 'plasma', 'viridis', 'inferno', ...]\n\n// You can use this list to populate UI elements like dropdowns or buttons.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"changing-the-colormap",children:"Changing the Colormap"}),"\n",(0,i.jsxs)(n.p,{children:["After a volume is loaded, you can dynamically change its colormap using the ",(0,i.jsx)(n.code,{children:"setColormap"})," method. You need the ID of the volume you want to modify. Often, for the first loaded volume, this is ",(0,i.jsx)(n.code,{children:"nv.volumes[0].id"}),". NiiVue sets the ID to a unique value when it is loaded so you don't have to manage this."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Assuming 'nv' is your Niivue instance and at least one volume is loaded\n\nconst firstVolumeId = nv.volumes[0].id;\n\n// Change the colormap of the first volume to 'viridis'\nnv.setColormap(firstVolumeId, 'viridis');\n\n// Change it to another map, e.g., 'plasma'\n// nv.setColormap(firstVolumeId, 'plasma');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"inverting-a-colormap",children:"Inverting a Colormap"}),"\n",(0,i.jsx)(n.p,{children:"You can invert the current colormap applied to a volume. This reverses the mapping, so low intensities map to colors previously used for high intensities, and vice-versa."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Assuming 'nv' is your Niivue instance and at least one volume is loaded\n\n// Get the first volume\nconst volume = nv.volumes[0];\n\n// Set the inversion status (true to invert, false for normal)\nvolume.colormapInvert = true;\n\n// Important: You must call updateGLVolume() to apply the change visually\nnv.updateGLVolume();\n\n// To revert back:\n// volume.colormapInvert = false;\n// nv.updateGLVolume();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"adjusting-gamma",children:"Adjusting Gamma"}),"\n",(0,i.jsx)(n.p,{children:"While not strictly a colormap change, the gamma setting adjusts the intensity mapping curve, affecting the brightness and contrast, which interacts significantly with how the colormap appears. A gamma value greater than 1 makes the image brighter, while less than 1 makes it darker."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Assuming 'nv' is your Niivue instance\n\nnv.setGamma(1.5); // Makes the image brighter\n\n// Set gamma to make the image darker\n// nv.setGamma(0.7);\n\n// Reset to default\n// nv.setGamma(1.0);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note: Unlike ",(0,i.jsx)(n.code,{children:"colormapInvert"}),", changes via setGamma update the view automatically"]}),"\n",(0,i.jsx)(n.h2,{id:"defining-and-using-custom-colormaps",children:"Defining and Using Custom Colormaps"}),"\n",(0,i.jsx)(n.p,{children:"You can create your own colormaps by defining an object with specific properties: R, G, B (arrays of red, green, blue values from 0-255), A (alpha/opacity values from 0-255), and I (intensity values defining the control points for the mapping)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Assuming 'nv' is your Niivue instance and at least one volume is loaded\n\n// 1. Define the custom colormap structure\nconst myCustomCmap = {\n R: [0, 255, 0],   // Red channel values at control points\n G: [0, 0, 255],   // Green channel values at control points\n B: [0, 0, 0],     // Blue channel values at control points\n A: [0, 128, 255], // Alpha values\n I: [0, 127, 255], // Intensity values corresponding to R,G,B,A points\n};\n\n// 2. Add the colormap to Niivue with a unique name\nnv.addColormap('MyCustomMap', myCustomCmap);\n\n// 3. Apply the custom colormap like any other colormap\nconst firstVolumeId = nv.volumes[0].id;\nnv.setColormap(firstVolumeId, 'MyCustomMap');\n\n// You can also apply it directly after adding:\n// nv.volumes[0].colormap = 'MyCustomMap';\n// nv.updateGLVolume(); // Requires manual update if set this way\n"})}),"\n",(0,i.jsx)(n.h2,{id:"displaying-the-colorbar",children:"Displaying the Colorbar"}),"\n",(0,i.jsx)(n.p,{children:"It's often helpful to display a colorbar alongside the image to show the current colormap and its corresponding data range. You can enable this in the Niivue options."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Option 1: Set when creating the Niivue instance\nconst nv = new Niivue({ isColorbar: true });\n\n// Option 2: Set after creating the instance\nconst nv = new Niivue();\nnv.opts.isColorbar = true; // or false\nnv.drawScene() // to see the changes. \n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}}}]);