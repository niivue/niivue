"use strict";(self.webpackChunk_niivue_docs=self.webpackChunk_niivue_docs||[]).push([[351],{9510:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>p,default:()=>x,frontMatter:()=>v,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"syncing","title":"Synchronizing Multiple Views","description":"When working with medical imaging data, it\'s often useful to have multiple synchronized views of the same or different volumes. Niivue provides robust synchronization capabilities that allow you to coordinate navigation, interaction, and visualization across multiple viewers.","source":"@site/docs/syncing.mdx","sourceDirName":".","slug":"/syncing","permalink":"/docs/syncing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Synchronizing Multiple Views","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Layouts and Slice Types","permalink":"/docs/layouts"},"next":{"title":"Statistical Thresholding","permalink":"/docs/thresholding"}}');var a=i(1085),s=i(1184),o=i(6190),r=i(4041);const l=[{url:"https://niivue.github.io/niivue-demo-images/pcasl.nii.gz",colormap:"turbo",opacity:1,visible:!0}],c=[{url:"https://niivue.github.io/niivue-demo-images/mni152.nii.gz",colormap:"gray",opacity:1,visible:!0}],d={isColorbar:!0,logLevel:"info",multiplanarShowRender:o.dq.ALWAYS,multiplanarLayout:o.v6.GRID,show3Dcrosshair:!0,backColor:[1,1,1,1]},u=e=>{let{nvOpts:n={}}=e;const i=(0,r.useRef)(null),t=(0,r.useRef)(null),s=(0,r.useRef)(null),u=(0,r.useRef)(null),[h,v]=(0,r.useState)(3),[p,g]=(0,r.useState)(0),[m,y]=(0,r.useState)(512),[x,w]=(0,r.useState)(1),[f,j]=(0,r.useState)(""),[b,z]=(0,r.useState)(""),S={...d,...n};(0,r.useEffect)((()=>((async()=>{if(!s.current&&i.current){console.log("Initializing Niivue 1...");const n=new o.FM({...S,onLocationChange:e=>j(e.string)});s.current=n,await n.attachToCanvas(i.current),console.log("Niivue 1 attached to canvas.");try{await n.loadVolumes(l),console.log("Volumes loaded in Niivue 1.")}catch(e){console.error("Error loading volumes in Niivue 1:",e)}}if(!u.current&&t.current){console.log("Initializing Niivue 2...");const n=new o.FM({...S,onLocationChange:e=>z(e.string)});u.current=n,await n.attachToCanvas(t.current),console.log("Niivue 2 attached to canvas.");try{await n.loadVolumes(c),console.log("Volumes loaded in Niivue 2."),N(h)}catch(e){console.error("Error loading volumes in Niivue 2:",e)}}})(),()=>{console.log("Cleaning up Niivue instances..."),s.current=null,u.current=null})),[]);const N=e=>{if(!s.current||!u.current)return;const n=s.current,i=u.current;let t=e%2==1,a=e>=2;n.broadcastTo([i],{"2d":t,"3d":a}),i.broadcastTo([n],{"2d":t,"3d":a})};(0,r.useEffect)((()=>{N(h)}),[h]),(0,r.useEffect)((()=>{s.current&&u.current&&(s.current.setMultiplanarLayout(p),u.current.setMultiplanarLayout(p))}),[p]),(0,r.useEffect)((()=>{i.current&&t.current&&s.current&&u.current&&(i.current.height=m,t.current.height=m,s.current.resizeListener(),u.current.resizeListener())}),[m]);return(0,a.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",gap:"15px",padding:"10px",border:"1px solid #ccc",borderRadius:"8px",marginBottom:"15px"},children:[(0,a.jsxs)("div",{style:{display:"flex",flexWrap:"wrap",justifyContent:"center",gap:"15px",alignItems:"center",width:"100%"},children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{htmlFor:"layout",style:{marginRight:"5px"},children:"Layout:"}),(0,a.jsxs)("select",{id:"layout",value:p,onChange:e=>{const n=parseInt(e.target.value);g(n)},children:[(0,a.jsx)("option",{value:"0",children:"Auto"}),(0,a.jsx)("option",{value:"1",children:"Column"}),(0,a.jsx)("option",{value:"2",children:"Grid"}),(0,a.jsx)("option",{value:"3",children:"Row"})]})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{htmlFor:"canvasHeight",style:{marginRight:"5px"},children:"Height:"}),(0,a.jsxs)("select",{id:"canvasHeight",value:m,onChange:e=>{const n=parseInt(e.target.value);y(n)},children:[(0,a.jsx)("option",{value:"256",children:"256"}),(0,a.jsx)("option",{value:"512",children:"512"}),(0,a.jsx)("option",{value:"768",children:"768"})]})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("label",{htmlFor:"syncMode",style:{marginRight:"5px"},children:"Broadcast:"}),(0,a.jsxs)("select",{id:"syncMode",value:h,onChange:e=>{const n=parseInt(e.target.value);v(n)},children:[(0,a.jsx)("option",{value:"0",children:"Sync Disabled"}),(0,a.jsx)("option",{value:"1",children:"Sync 2D"}),(0,a.jsx)("option",{value:"2",children:"Sync 3D"}),(0,a.jsx)("option",{value:"3",children:"Sync 2D and 3D"})]})]}),(0,a.jsxs)("div",{style:{display:"flex",alignItems:"center",gap:"5px"},children:[(0,a.jsx)("label",{htmlFor:"gammaSlider",children:"Gamma:"}),(0,a.jsx)("input",{type:"range",id:"gammaSlider",min:"0.1",max:"4.0",step:"0.1",value:x,onChange:e=>{const n=parseFloat(e.target.value);if(s.current){s.current.setGamma(n);const e=s.current.gl.canvas;e.focus(),s.current.sync(),e.blur(),w(n)}}}),(0,a.jsx)("span",{children:x.toFixed(1)})]})]}),(0,a.jsxs)("div",{style:{display:"flex",flexDirection:"row",gap:"10px",flexWrap:"wrap",justifyContent:"center",width:"100%"},children:[(0,a.jsx)("div",{style:{flex:1,minWidth:300},children:(0,a.jsx)("div",{style:{height:"100%",width:"100%"},children:(0,a.jsx)("canvas",{ref:i})})}),(0,a.jsx)("div",{style:{flex:1,minWidth:300},children:(0,a.jsx)("div",{style:{height:"100%",width:"100%"},children:(0,a.jsx)("canvas",{ref:t})})})]}),(0,a.jsxs)("div",{style:{display:"flex",justifyContent:"space-around",width:"100%"},children:[(0,a.jsx)("div",{style:{fontFamily:"monospace"},children:f}),(0,a.jsx)("div",{style:{fontFamily:"monospace"},children:b})]})]})};var h=i(7221);const v={title:"Synchronizing Multiple Views",sidebar_position:4},p=void 0,g={},m=[{value:"Creating Multiple Niivue Instances",id:"creating-multiple-niivue-instances",level:2},{value:"Setting Up Synchronization with broadcastTo",id:"setting-up-synchronization-with-broadcastto",level:2},{value:"Synchronization Options",id:"synchronization-options",level:2},{value:"Synchronizing Multiple Viewers",id:"synchronizing-multiple-viewers",level:2},{value:"Synchronizing Views with Different Data",id:"synchronizing-views-with-different-data",level:2}];function y(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"When working with medical imaging data, it's often useful to have multiple synchronized views of the same or different volumes. Niivue provides robust synchronization capabilities that allow you to coordinate navigation, interaction, and visualization across multiple viewers."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Try interacting with the viewers below!"})," Use the dropdown to control which aspects are synchronized between the instances."]}),"\n",(0,a.jsx)(h.A,{children:(0,a.jsx)(u,{})}),"\n",(0,a.jsx)(n.h2,{id:"creating-multiple-niivue-instances",children:"Creating Multiple Niivue Instances"}),"\n",(0,a.jsx)(n.p,{children:"To synchronize views, you first need to create multiple Niivue instances, each attached to its own canvas element."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Create and initialize first Niivue instance\nconst nv1 = new Niivue();\nawait nv1.attachToCanvas(document.getElementById('canvas1'));\nawait nv1.loadVolumes([{ url: '/path/to/volume.nii.gz' }]);\n\n// Create and initialize second Niivue instance\nconst nv2 = new Niivue();\nawait nv2.attachToCanvas(document.getElementById('canvas2'));\nawait nv2.loadVolumes([{ url: '/path/to/volume.nii.gz' }]);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"setting-up-synchronization-with-broadcastto",children:"Setting Up Synchronization with broadcastTo"}),"\n",(0,a.jsxs)(n.p,{children:["Niivue provides a ",(0,a.jsx)(n.code,{children:"broadcastTo"})," method that lets you create synchronized connections between multiple viewers. This allows you to easily synchronize movements, layouts, crosshair positions, and more."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Set up bidirectional synchronization between nv1 and nv2\n// Synchronize both 2D (slices) and 3D (volume rendering) views\nnv1.broadcastTo([nv2], { "2d": true, "3d": true });\nnv2.broadcastTo([nv1], { "2d": true, "3d": true });\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"broadcastTo"})," method takes two parameters:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"An array of Niivue instances to broadcast to"}),"\n",(0,a.jsxs)(n.li,{children:["A configuration object that specifies what to synchronize:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"2d"'}),": When true, synchronizes 2D slice views (crosshair position, pan, zoom)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"3d"'}),": When true, synchronizes 3D volume rendering views (camera position)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"synchronization-options",children:"Synchronization Options"}),"\n",(0,a.jsx)(n.p,{children:"You can control which aspects of the views are synchronized:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Synchronize only 2D views (slices)\nnv1.broadcastTo([nv2], { "2d": true, "3d": false });\n\n// Synchronize only 3D views (volume rendering)\nnv1.broadcastTo([nv2], { "2d": false, "3d": true });\n\n// Disable synchronization\nnv1.broadcastTo([nv2], { "2d": false, "3d": false });\n'})}),"\n",(0,a.jsx)(n.h2,{id:"synchronizing-multiple-viewers",children:"Synchronizing Multiple Viewers"}),"\n",(0,a.jsx)(n.p,{children:"You can synchronize more than two viewers by including all target instances in the array:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Create three Niivue instances\nconst nv1 = new Niivue();\nconst nv2 = new Niivue();\nconst nv3 = new Niivue();\n\n// Attach to canvases and load volumes\n// ...\n\n// Set up synchronization between all three viewers\nnv1.broadcastTo([nv2, nv3], { "2d": true, "3d": true });\nnv2.broadcastTo([nv1, nv3], { "2d": true, "3d": true });\nnv3.broadcastTo([nv1, nv2], { "2d": true, "3d": true });\n'})}),"\n",(0,a.jsx)(n.h2,{id:"synchronizing-views-with-different-data",children:"Synchronizing Views with Different Data"}),"\n",(0,a.jsx)(n.p,{children:"You can synchronize views even when displaying different types of data, such as an anatomical MRI in one view and a functional overlay in another. This is useful for comparing different modalities or time points. In most cases, you would want the images to be aligned first using tools like FSL, AFNI, ANTs, SPM, ITK, etc."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Load an anatomical image in the first viewer\nawait nv1.loadVolumes([{\n  url: '/path/to/anatomical.nii.gz',\n  colormap: 'gray'\n}]);\n\n// Load anatomical + functional overlay in the second viewer\nawait nv2.loadVolumes([\n  {\n    url: '/path/to/anatomical.nii.gz',\n    colormap: 'gray'\n  },\n  {\n    url: '/path/to/functional.nii.gz',\n    colormap: 'warm',\n    opacity: 0.7\n  }\n]);\n\n// Synchronize the viewers\nnv1.broadcastTo([nv2], { \"2d\": true, \"3d\": true });\nnv2.broadcastTo([nv1], { \"2d\": true, \"3d\": true });\n"})})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(y,{...e})}):y(e)}}}]);