"use strict";(self.webpackChunk_niivue_docs=self.webpackChunk_niivue_docs||[]).push([[6397],{1184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(4041);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},4219:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"fonts","title":"Fonts","description":"Introduction","source":"@site/docs/fonts.mdx","sourceDirName":".","slug":"/fonts","permalink":"/docs/fonts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Fonts","sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"WebGL2","permalink":"/docs/webgl"},"next":{"title":"Mesh","permalink":"/docs/mesh"}}');var i=t(1085),r=t(1184);const o={title:"Fonts",sidebar_position:11},a=void 0,c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Usage",id:"usage",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["There are ",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/25956272/better-quality-text-in-webgl",children:"several approaches to render text in WebGL"})," as described ",(0,i.jsx)(n.a,{href:"https://css-tricks.com/techniques-for-rendering-text-with-webgl/",children:"here"}),". NiiVue uses\n",(0,i.jsx)(n.a,{href:"https://github.com/Chlumsky/msdfgen",children:"multi-channel signed distance field"}),". The default font supplied with NiiVue is ",(0,i.jsx)(n.a,{href:"https://fonts.google.com/specimen/Roboto?preview.text_type=custom",children:"Roboto"}),", created with ",(0,i.jsx)(n.a,{href:"https://github.com/Chlumsky/msdf-atlas-gen",children:"msdf-atlas-gen"})," using the command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"msdf-atlas-gen.exe -font Roboto-Regular.ttf -charset chars.txt -pxrange 2 -dimensions 512 256 -format png -json fnt.json -imageout fnt.png\n"})}),"\n",(0,i.jsx)(n.p,{children:"Where chars.txt is a text file with the following characters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"\\"\\\\ ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!`?\'.,;:()[]{}<>|/@^$-%+=#_&~*"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Running the command will generate output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Loaded geometry of 95 out of 95 characters.\nGlyph size: 59.65625 pixels/EM\nAtlas image file saved.\nGlyph layout and metadata written into JSON file.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The typeface or character set can be changed by modifying the commands. NiiVue will read the JSON format created by msdf-atlas-gen (version 1.1), so to change the typeface used by NiiVue, simply replace the ",(0,i.jsx)(n.code,{children:"fnt.json"})," and ",(0,i.jsx)(n.code,{children:"fnt.png"})," files in ",(0,i.jsx)(n.code,{children:"public"})," folder."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Viktor Chlumsk\xfd's ",(0,i.jsx)(n.a,{href:"https://github.com/Chlumsky/msdfgen",children:"GLSL fragment shader"})," is easily adapted for WebGL. The uniform screenPxRange is described by Viktor as ",(0,i.jsx)(n.code,{children:"the distance field range in output screen pixels. For example, if the pixel range was set to 2 when generating a 32x32 distance field, and it is used to draw a quad that is 72x72 pixels on the screen, it should return 4.5 (because 72/32 * 2 = 4.5)."})," Note that both distance range and distance field are reported in the JSON file created by msdf-atlas-gen: ",(0,i.jsx)(n.code,{children:'"distanceRange":2,"size":59.65625'}),". Therefore, the complete WebGL fragment shader is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"#version 300 es\nprecision highp int;\nprecision highp float;\nuniform highp sampler2D fontTexture;\nuniform vec4 fontColor;\nuniform float screenPxRange;\nin vec2 vUV;\nout vec4 color;\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\nvoid main() {\n\tvec3 msd = texture(fontTexture, vUV).rgb;\n\t//color = vec4(msd, 1.0); return;\n    float sd = median(msd.r, msd.g, msd.b);\n    float screenPxDistance = screenPxRange*(sd - 0.5);\n    float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\tcolor = vec4(fontColor.rgb , opacity);\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);